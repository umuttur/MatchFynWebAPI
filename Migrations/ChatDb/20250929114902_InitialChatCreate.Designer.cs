// <auto-generated />
using System;
using MatchFynWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchFynWebAPI.Migrations.ChatDb
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20250929114902_InitialChatCreate")]
    partial class InitialChatCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Text");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Messages_CreatedAt");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_Messages_RoomId");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("IX_Messages_SenderId");

                    b.HasIndex("RoomId", "CreatedAt")
                        .HasDatabaseName("IX_Messages_Room_CreatedAt");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.MessageReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId", "UserId", "ReactionType")
                        .IsUnique()
                        .HasDatabaseName("IX_MessageReactions_Message_User_Type");

                    b.ToTable("MessageReactions");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderFilter")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Rooms_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Rooms_IsActive");

                    b.HasIndex("RoomType")
                        .HasDatabaseName("IX_Rooms_RoomType");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Rooms_Status");

                    b.HasIndex("RoomType", "Status", "IsActive")
                        .HasDatabaseName("IX_Rooms_Type_Status_Active");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 29, 11, 49, 1, 982, DateTimeKind.Utc).AddTicks(2438),
                            CurrentParticipants = 0,
                            Description = "Herkese açık genel sohbet odası",
                            GenderFilter = "Mixed",
                            IsActive = true,
                            IsPremium = false,
                            MaxCapacity = 20,
                            Name = "Genel Sohbet",
                            RoomType = "Public",
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 9, 29, 11, 49, 1, 982, DateTimeKind.Utc).AddTicks(2438)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 29, 11, 49, 1, 982, DateTimeKind.Utc).AddTicks(2442),
                            CurrentParticipants = 0,
                            Description = "Müzik hakkında sohbet odası",
                            GenderFilter = "Mixed",
                            IsActive = true,
                            IsPremium = false,
                            MaxCapacity = 20,
                            Name = "Müzik Severler",
                            RoomType = "Public",
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 9, 29, 11, 49, 1, 982, DateTimeKind.Utc).AddTicks(2442)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 29, 11, 49, 1, 982, DateTimeKind.Utc).AddTicks(2445),
                            CurrentParticipants = 0,
                            Description = "Spor ve fitness hakkında sohbet",
                            GenderFilter = "Mixed",
                            IsActive = true,
                            IsPremium = false,
                            MaxCapacity = 20,
                            Name = "Spor Konuşmaları",
                            RoomType = "Public",
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 9, 29, 11, 49, 1, 982, DateTimeKind.Utc).AddTicks(2446)
                        });
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.RoomParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GridPosition")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsMicrophoneEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpeaking")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("LastActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Member");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Online");

                    b.Property<int>("TotalTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_RoomParticipants_IsActive");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_RoomParticipants_RoomId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RoomParticipants_UserId");

                    b.HasIndex("RoomId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_RoomParticipants_Room_User");

                    b.ToTable("RoomParticipants");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.VoiceActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("AudioLevel")
                        .HasColumnType("int");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("VoiceSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityType")
                        .HasDatabaseName("IX_VoiceActivities_ActivityType");

                    b.HasIndex("VoiceSessionId")
                        .HasDatabaseName("IX_VoiceActivities_VoiceSessionId");

                    b.ToTable("VoiceActivities");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.VoiceSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("int");

                    b.Property<string>("AudioQuality")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Medium");

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ConnectionQuality")
                        .HasColumnType("int");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSpeaking")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PeerConnectionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SpeakingTimeSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_VoiceSessions_RoomId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_VoiceSessions_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_VoiceSessions_UserId");

                    b.ToTable("VoiceSessions");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.Message", b =>
                {
                    b.HasOne("MatchFynWebAPI.Models.Chat.Message", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MatchFynWebAPI.Models.Chat.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchFynWebAPI.Models.Chat.RoomParticipant", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Room");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.MessageReaction", b =>
                {
                    b.HasOne("MatchFynWebAPI.Models.Chat.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.RoomParticipant", b =>
                {
                    b.HasOne("MatchFynWebAPI.Models.Chat.Room", "Room")
                        .WithMany("Participants")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.VoiceActivity", b =>
                {
                    b.HasOne("MatchFynWebAPI.Models.Chat.VoiceSession", "VoiceSession")
                        .WithMany("VoiceActivities")
                        .HasForeignKey("VoiceSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoiceSession");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.VoiceSession", b =>
                {
                    b.HasOne("MatchFynWebAPI.Models.Chat.Room", "Room")
                        .WithMany("VoiceSessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.Message", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.Room", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");

                    b.Navigation("VoiceSessions");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.RoomParticipant", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Chat.VoiceSession", b =>
                {
                    b.Navigation("VoiceActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
