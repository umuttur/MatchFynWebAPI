// <auto-generated />
using System;
using MatchFynWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchFynWebAPI.Migrations
{
    [DbContext(typeof(MatchFynDbContext))]
    partial class MatchFynDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MatchFynWebAPI.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Aktivite",
                            Description = "Spor aktiviteleri",
                            IsActive = true,
                            Name = "Spor"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Sanat",
                            Description = "Müzik dinleme ve çalma",
                            IsActive = true,
                            Name = "Müzik"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Yaşam",
                            Description = "Gezme ve seyahat etme",
                            IsActive = true,
                            Name = "Seyahat"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Eğitim",
                            Description = "Kitap okuma",
                            IsActive = true,
                            Name = "Kitap"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Eğlence",
                            Description = "Film izleme",
                            IsActive = true,
                            Name = "Sinema"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Yaşam",
                            Description = "Yemek yapma ve deneme",
                            IsActive = true,
                            Name = "Yemek"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Teknoloji",
                            Description = "Teknoloji ve gadget'lar",
                            IsActive = true,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Sanat",
                            Description = "Resim, heykel ve sanat",
                            IsActive = true,
                            Name = "Sanat"
                        });
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.UserInterest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("InterestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Match", b =>
                {
                    b.HasOne("MatchFynWebAPI.Models.User", "Receiver")
                        .WithMany("ReceivedMatches")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MatchFynWebAPI.Models.User", "Sender")
                        .WithMany("SentMatches")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.UserInterest", b =>
                {
                    b.HasOne("MatchFynWebAPI.Models.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchFynWebAPI.Models.User", "User")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.Interest", b =>
                {
                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("MatchFynWebAPI.Models.User", b =>
                {
                    b.Navigation("ReceivedMatches");

                    b.Navigation("SentMatches");

                    b.Navigation("UserInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
